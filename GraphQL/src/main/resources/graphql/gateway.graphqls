scalar JSON

type Node {
    _id: ID!
    type: String
    nodeData:JSON
}

input NodeInput{
    type:String!,
    schema_file:String!
    nodeData:JSON!
}

type Edge {
    _from: ID!
    _to: ID!
    label: String
}

type Response {
    vertex: JSON
    edge: JSON
    path: JSON
}
type Res {
    allResults:JSON
}

type Query {
    getNode(id: ID!,type:String): Node
    getNodes(type:String): [Node]
    getEdges(type:String): [Edge]
    traverseGraph(startId: String!, depth: String!,graphName:String!,direction: String!): [Response]
    search(collectionName: String!, searchVal: String!,searchProperty:String!,operator:String!,offset:Int!,count:Int!,analyzer:String): Res
}

type Mutation {
    createNode(input:NodeInput): Node
    createEdge(from: String!, to: String!, label: String!): Edge
    createGraph(graphName:String!,edgeDefinition:String!,fromCollections:String!,toCollections:String!):Node
}